#pragma kernel Transfer

struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 og;
  float2 uv;
  float2 debug;
};



RWStructuredBuffer<Vert> _VertBuffer;

int _VertBuffer_COUNT;

float3 _Offset;

#include "../Chunks/safeID.cginc"


float4x4 _TransformBase;

Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;
float _MapSize;
float _MapHeight;


    float3 worldPos( float3 pos ){
        float4 c = _HeightMap.SampleLevel(sampler_HeightMap, (pos.xz-.5) * _MapSize  , 0);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
        pos.y =  c.x * _MapHeight;
        return pos;
    }


    float3 getNormal( float3 pos ){

      float delta = 1;
      float3 dU = worldPos( pos + float3(delta,0,0) );
      float3 dD = worldPos( pos + float3(-delta,0,0) );
      float3 dL = worldPos( pos + float3(0,0,delta) );
      float3 dR = worldPos( pos + float3(0,0,-delta) );

      return normalize(cross(dU.xyz-dD.xyz , dL.xyz-dR.xyz));

    }




    float2 _MiniMapCenter;
    float3 _MiniMapSize;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = safeID( threadID + u3GroupID.x * NR_THREADS , _VertBuffer_COUNT );

  if( pID < _VertBuffer_COUNT ){
    
    Vert v = _VertBuffer[pID];


    float3 tToCheck = float3(_MiniMapCenter.x,0,_MiniMapCenter.y) + float3(v.og.x,0,v.og.z)* float3(_MiniMapSize.x, 0, _MiniMapSize.z);



   float height = worldPos( tToCheck ).y;

   float3 worldPos = float3(tToCheck.x , height, tToCheck.z);// + float3(0)
   height /= _MiniMapSize.y;

  
    v.pos = mul( _TransformBase , float4(float3(v.og.x, height,v.og.z),1));
    v.vel = worldPos;
    v.debug.x = height;
  // v.pos.y = 0;
   // v.nor = getNormal( v.pos );
   // v.pos = worldPos(v.pos) ;



    _VertBuffer[pID] =  v;

  }

}

