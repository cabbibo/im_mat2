#pragma kernel Transfer


struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tang;
  float2 uv;
  float2 debug;
};


struct Transform{
    float4x4 ltw;
    float4x4 wtl;
};


RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Transform> _SkeletonBuffer;
RWStructuredBuffer<Vert> _BaseBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;
int _BaseBuffer_COUNT;


float _Scale;
int _VertsPerMesh;
float _Time;

float4x4 _Transform;

#include "../Chunks/safeID.cginc"
#include "../Chunks/nanCheckVert.cginc"
#include "../Chunks/GetRayForce.cginc"
#define NR_THREADS 128

[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  int whichMesh = pID / _VertsPerMesh;
  int idInMesh = pID % _VertsPerMesh;

  if( pID < _VertBuffer_COUNT ){
    
    int sID = safeID( pID, _VertBuffer_COUNT );
    Vert p = _VertBuffer[sID];

    int sSID = safeID( idInMesh , _BaseBuffer_COUNT );
    Vert v = _BaseBuffer[sSID];

    int sTID = safeID( whichMesh , _SkeletonBuffer_COUNT );
    Transform t = _SkeletonBuffer[sTID];

    p.pos = mul(t.ltw, float4( v.pos ,1 )).xyz;
    p.nor = normalize(mul(t.ltw , float4( v.nor ,0 )).xyz);
    p.tang = mul(t.ltw , float4( v.tang ,1 )).xyz;
    p.uv  = v.uv;
 
    _VertBuffer[sID] = p;   


  }

}

