
#pragma kernel Transfer
#pragma kernel BushPlane
#pragma kernel Forward
#pragma kernel ForwardOffset
#pragma kernel ForwardDebugXSize
#pragma kernel ForwardAudio
#pragma kernel LifeSize
#pragma kernel LifeSizeEmitted
#pragma kernel LifeSizeFade
#pragma kernel Collision
#pragma kernel LifeSizeEmittedAudio

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;
#include "../Chunks/safeID.cginc"

float3 _CameraLeft;


float3 _CameraRight;
float3 _CameraUp;
float3 _CameraForward;
float _Radius;
float _Fade;


float _ClosestGPUCollisionID;
float3 _ClosestGPUCollision;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );

}

[numthreads(NR_THREADS,1,1)]
void Forward(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = _CameraRight;//normalize(cross(p.nor,float3(0,1,0)));
    float3 u = _CameraUp;//normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = _CameraForward;//p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );


}

[numthreads(NR_THREADS,1,1)]
void ForwardDebugXSize(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = _CameraRight;//normalize(cross(p.nor,float3(0,1,0)));
    float3 u = _CameraUp;//normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius  * (p.debug.x * .3 + .2);

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv  = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( p.debug.x , p.debug.y );

}



#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void LifeSize (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius * min( max(3-p.debug.y * 3,0) , max(p.debug.y,0));

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );

}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void LifeSizeFade (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius * min( max(3-p.debug.y * 3,0) , max(p.debug.y,0)) * _Fade;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );

}




#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Collision(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));

    float3 n = normalize(cross( l, u));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    if( particleID == _ClosestGPUCollisionID ){ l *= 2; u *= 2;}

    float3 fPos = p.pos + (l + u) *  _Radius;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = n;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );

}




#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void LifeSizeEmitted(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius * min( max(3-p.debug.y * 3,0) , max(p.debug.y,0));

    fPos *= p.tangent.x;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );

}



float _CountMultiplier;
int _CountOffset;


#include "../Chunks/audioCompute.cginc"

[numthreads(NR_THREADS,1,1)]
void ForwardOffset(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;
    particleID *= int(_CountMultiplier);


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    //float3 l = _CameraRight;//normalize(cross(p.nor,float3(0,1,0)));
    //float3 u = _CameraUp;//normalize(cross(p.nor,l));
    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));
    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float4 audio =  sampleAudio( .0 + (1-p.uv.x) * .1);

    float3 fPos = p.pos + (l + u)  * .5 * _Radius;// +   _Radius;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );


}




#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void LifeSizeEmittedAudio(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float4 audio =  sampleAudio( .0 + (1-p.uv.x) * .1);

    float3 l = normalize(cross(p.nor,float3(0,1,0)));
    float3 u = normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius * min( max(3-p.debug.y * 3,0) , max(p.debug.y,0)) * length(audio);

    fPos *= p.tangent.x;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );

}




[numthreads(NR_THREADS,1,1)]
void BushPlane(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = normalize(cross(p.nor,_CameraForward));
    float3 u = p.nor;

    l *= (float(col)-.5);
    u *= float(row);//(float(row)-.5);

    float3 fPos = p.pos + (l + u) *  _Radius * clamp(p.tangent.z -.1,0,1);//clamp(p.tangent.z,0,1);
    

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = -_CameraForward;//p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );


}



[numthreads(NR_THREADS,1,1)]
void ForwardAudio(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = _CameraRight;//normalize(cross(p.nor,float3(0,1,0)));
    float3 u = _CameraUp;//normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    
    float4 audio =  sampleAudio( .0 + (1-p.uv.x) * .1);

    float3 fPos = p.pos + (l + u) *  _Radius * (.3+length(audio));

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = _CameraForward;//p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );


}